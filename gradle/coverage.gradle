apply plugin: 'jacoco'

jacoco {
    toolVersion = testVersions.jacoco
}

tasks.withType(Test).configureEach {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

def projectSrcDirs = ["src/main/java", "src/main/kotlin"]

task createJacocoTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest']
) {
    group = "Reporting"
    description = "Combines coverage of unit tests and instrumented tests"

    reports {
        html.destination file("../test_coverage/unit_tests/${project.name}")
    }

    def exclusions = [
            '**/*_Impl*',
            '**/*_Impl*.class'
    ]

    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclusions)
    classDirectories.setFrom(files([kotlinTree]))
    sourceDirectories.setFrom(files(projectSrcDirs))
    executionData.setFrom(fileTree(
            dir: "$project.buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
    ]))
}


task createJacocoCombinedTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugAndroidTestCoverageReport']
) {
    group = "Reporting"
    description = "Combines coverage of unit tests and instrumented tests"

    reports {
        html.destination file("../test_coverage/all_tests/${project.name}")
    }

    def exclusions = [
            '**/*_Impl*',
            '**/*_Impl*.class'
    ]

    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclusions)
    classDirectories.setFrom(files([kotlinTree]))
    sourceDirectories.setFrom(files(projectSrcDirs))
    executionData.setFrom(fileTree(
            dir: "$project.buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*/*.ec"
    ]))
}
